name: 📚 ArXiv 論文智慧摘要

on:
  # 定時執行：每日 UTC 16:30 (台灣時間 00:30)
  schedule:
    - cron: "30 16 * * *"
  
  # 手動觸發
  workflow_dispatch:
    inputs:
      target_date:
        description: '目標日期 (YYYY-MM-DD，留空為今日)'
        required: false
        type: string
      force_update:
        description: '強制更新 (即使已有報告)'
        required: false
        type: boolean
        default: false
      debug_mode:
        description: '偵錯模式 (僅測試爬蟲功能)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  update_papers:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 檢出儲存庫
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: 🐍 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 安裝依賴套件
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: ⚙️ 設定 Git 使用者資訊
      if: github.event.inputs.debug_mode != 'true'
      run: |
        git config --global user.email "${{ vars.EMAIL || 'action@github.com' }}"
        git config --global user.name "${{ vars.NAME || 'ArXiv Daily Bot' }}"
        
    - name: 🚀 執行論文爬蟲和摘要生成
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        MODEL_NAME: ${{ vars.MODEL_NAME || 'gemini-2.0-flash-exp' }}
        LANGUAGE: ${{ vars.LANGUAGE || 'Traditional Chinese' }}
        CUSTOM_DATE: ${{ github.event.inputs.target_date }}
        FORCE_UPDATE: ${{ github.event.inputs.force_update }}
      run: |
        echo "🚀 開始執行論文處理..."
        echo "📅 目標日期: ${CUSTOM_DATE:-$(date -u '+%Y-%m-%d')}"
        echo "🔄 強制更新: ${FORCE_UPDATE}"
        echo "🧪 偵錯模式: ${{ github.event.inputs.debug_mode }}"
        echo "🤖 AI 模型: ${MODEL_NAME}"
        
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          echo "🧪 執行偵錯模式 - 僅測試爬蟲功能"
          python -c "
import logging
logging.basicConfig(level=logging.DEBUG)

print('🔍 測試爬蟲模組導入...')
from arxiv_crawler import ArxivCrawler

print('✅ 爬蟲模組導入成功')
crawler = ArxivCrawler()
print('✅ 爬蟲初始化成功')

test_date = '${CUSTOM_DATE:-$(date -u '+%Y-%m-%d')}'
print(f'🔍 測試論文抓取 (日期: {test_date})...')

papers = crawler.get_papers(test_date)
print(f'✅ 成功抓取 {len(papers)} 篇論文')

if papers:
    print('📄 第一篇論文資訊:')
    paper = papers[0]
    print(f'  標題: {paper.get(\"title\", \"未知\")}')
    print(f'  作者數: {len(paper.get(\"authors\", []))}')
    print(f'  類別: {paper.get(\"categories\", [])}')
    print(f'  ArXiv ID: {paper.get(\"arxiv_id\", \"未知\")}')
    print(f'  發布日期: {paper.get(\"published\", \"未知\")}')
else:
    print('⚠️ 沒有找到論文，可能原因:')
    print('  - 網路連接問題')
    print('  - arXiv API 暫時不可用')
    print('  - 搜尋條件過於嚴格')
    print('  - 週末或假日，arXiv 通常不發布新論文')
    
print('🎉 偵錯測試完成')
"
        else
          echo "🚀 執行完整流程"
          python main.py
        fi
        
    - name: 📋 檢查檔案變更
      if: github.event.inputs.debug_mode != 'true'
      id: check_changes
      run: |
        if [[ -z $(git status --porcelain) ]]; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "📋 沒有檔案變更"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "📝 偵測到檔案變更"
          git status --short
        fi
        
    - name: 💾 提交和推送變更
      if: steps.check_changes.outputs.has_changes == 'true' && github.event.inputs.debug_mode != 'true'
      run: |
        today_date=$(date -u "+%Y-%m-%d")
        
        if [[ -n "${{ github.event.inputs.target_date }}" ]]; then
          commit_message="📚 論文摘要更新: ${{ github.event.inputs.target_date }} (手動觸發)"
        else
          commit_message="📚 每日論文摘要更新: ${today_date}"
        fi
        
        git add .
        git commit -m "${commit_message}"
        git push
        
    - name: 📊 生成執行報告
      if: always()
      run: |
        echo "## 📊 執行報告" >> $GITHUB_STEP_SUMMARY
        echo "- **執行時間**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **執行模式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **偵錯模式**: ${{ github.event.inputs.debug_mode || 'false' }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ -n "${{ github.event.inputs.target_date }}" ]]; then
          echo "- **目標日期**: ${{ github.event.inputs.target_date }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          echo "- **強制更新**: 是" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚙️ 系統狀態" >> $GITHUB_STEP_SUMMARY
        echo "- **API 金鑰**: ${{ secrets.GOOGLE_API_KEY && '已設定' || '未設定' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **模型名稱**: ${{ vars.MODEL_NAME || '使用預設值' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **輸出語言**: ${{ vars.LANGUAGE || '使用預設值' }}" >> $GITHUB_STEP_SUMMARY
        
        # 檢查生成的檔案
        if [ -d "data" ] && [ "${{ github.event.inputs.debug_mode }}" != "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 生成的檔案" >> $GITHUB_STEP_SUMMARY
          md_count=$(ls data/*.md 2>/dev/null | wc -l)
          json_count=$(ls data/*.json 2>/dev/null | wc -l)
          echo "- **Markdown 報告**: ${md_count} 個" >> $GITHUB_STEP_SUMMARY
          echo "- **JSON 資料**: ${json_count} 個" >> $GITHUB_STEP_SUMMARY
        fi
