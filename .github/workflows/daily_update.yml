# GitHub Actions 自動化工作流程
# 每日自動抓取 ArXiv 論文並生成 AI 摘要

name: 每日 ArXiv 論文智慧摘要更新

on:
  # 定時執行：每日 UTC 16:30 (台灣時間 00:30)
  schedule:
    - cron: "30 16 * * *"
  
  # 允許手動觸發
  workflow_dispatch:
    inputs:
      custom_date:
        description: '自訂日期 (YYYY-MM-DD，留空為今日)'
        required: false
        type: string
      force_update:
        description: '強制更新 (即使沒有新論文)'
        required: false
        type: boolean
        default: false

# 添加必要的權限設定
permissions:
  contents: write
  actions: read

jobs:
  update_papers:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 檢出儲存庫
    - name: 檢出儲存庫
      uses: actions/checkout@v4
      with:
        # 使用具有推送權限的 token
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    # 2. 設定 Python 環境
    - name: 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    # 3. 安裝基本套件
    - name: 安裝基本套件
      run: |
        python -m pip install --upgrade pip
        # 先安裝基本套件，避免依賴衝突
        pip install requests pyyaml python-dateutil
        
    # 4. 設定 Git 使用者資訊
    - name: 設定 Git 使用者資訊
      run: |
        git config --global user.email "${{ vars.EMAIL || 'action@github.com' }}"
        git config --global user.name "${{ vars.NAME || 'GitHub Action' }}"
        
    # 5. 確保與遠端同步
    - name: 同步遠端變更
      run: |
        # 拉取最新的遠端變更
        git fetch origin
        git pull origin ${{ github.ref_name }} || echo "沒有需要合併的變更"
        
    # 6. 執行簡化的處理腳本
    - name: 執行論文處理（簡化版）
      env:
        # API 設定
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        
        # 模型設定
        MODEL_NAME: ${{ vars.MODEL_NAME || 'gemini-2.0-flash-exp' }}
        LANGUAGE: ${{ vars.LANGUAGE || 'Traditional Chinese' }}
        
        # 工作流程參數
        CUSTOM_DATE: ${{ github.event.inputs.custom_date }}
        FORCE_UPDATE: ${{ github.event.inputs.force_update }}
        
        # GitHub 相關
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_NAME: ${{ github.repository }}
        
      run: |
        # 執行簡化的處理腳本
        python simple_main.py
        
    # 7. 檢查是否有檔案變更
    - name: 檢查檔案變更
      id: check_changes
      run: |
        if [[ -z $(git status -s) ]]; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "📋 沒有檔案變更，跳過提交步驟"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "📝 偵測到檔案變更，準備提交"
          git status
        fi
        
    # 8. 智慧提交和推送變更
    - name: 提交和推送變更
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        # 取得今日日期（台灣時區）
        today_date=$(date -u "+%Y-%m-%d")
        
        # 再次確保同步（防止執行期間有其他變更）
        git fetch origin
        
        # 檢查是否有衝突
        if ! git merge-base --is-ancestor HEAD origin/${{ github.ref_name }}; then
          echo "🔄 偵測到遠端有新變更，正在合併..."
          git pull origin ${{ github.ref_name }} --rebase || {
            echo "❌ 合併失敗，嘗試重置並重新拉取"
            git reset --hard origin/${{ github.ref_name }}
            # 重新執行腳本以確保檔案是最新的
            python simple_main.py
          }
        fi
        
        # 新增所有變更的檔案
        git add .
        
        # 檢查是否真的有變更需要提交
        if git diff --cached --quiet; then
          echo "📋 合併後沒有變更需要提交"
          exit 0
        fi
        
        # 產生提交訊息
        if [[ -n "${{ github.event.inputs.custom_date }}" ]]; then
          commit_message="📚 更新論文摘要: ${{ github.event.inputs.custom_date }} (手動觸發)"
        else
          commit_message="📚 每日論文摘要更新: ${today_date}"
        fi
        
        # 提交變更
        git commit -m "${commit_message}"
        
        # 推送到儲存庫（重試機制）
        max_retries=3
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          echo "🚀 嘗試推送變更 (第 $((retry_count + 1)) 次)..."
          
          # 設定遠端 URL
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          if git push origin HEAD:${{ github.ref_name }}; then
            echo "✅ 成功提交並推送變更"
            break
          else
            echo "⚠️ 推送失敗，嘗試同步並重試..."
            retry_count=$((retry_count + 1))
            
            if [ $retry_count -lt $max_retries ]; then
              # 拉取最新變更並嘗試重新合併
              git fetch origin
              if git pull origin ${{ github.ref_name }} --rebase; then
                echo "🔄 成功同步，準備重試推送"
              else
                echo "❌ 同步失敗，將在下次重試"
                sleep 5
              fi
            else
              echo "❌ 達到最大重試次數，推送失敗"
              exit 1
            fi
          fi
        done
        
    # 9. 生成執行報告
    - name: 生成執行報告
      if: always()
      run: |
        echo "## 📊 執行報告" >> $GITHUB_STEP_SUMMARY
        echo "- **執行時間**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **是否有變更**: ${{ steps.check_changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
        echo "- **執行模式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python 版本**: $(python --version)" >> $GITHUB_STEP_SUMMARY
        
        if [[ -n "${{ github.event.inputs.custom_date }}" ]]; then
          echo "- **自訂日期**: ${{ github.event.inputs.custom_date }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          echo "- **強制更新**: 是" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 檢查設定狀態
        echo "## ⚙️ 設定狀態" >> $GITHUB_STEP_SUMMARY
        echo "- **API 金鑰**: ${{ secrets.GOOGLE_API_KEY && '已設定' || '未設定' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **模型名稱**: ${{ vars.MODEL_NAME || '使用預設值' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **輸出語言**: ${{ vars.LANGUAGE || '使用預設值' }}" >> $GITHUB_STEP_SUMMARY
        
        # 如果有錯誤檔案，顯示錯誤資訊
        if [[ -f "error.log" ]]; then
          echo "## ⚠️ 執行過程中的警告" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -10 error.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    # 10. 清理暫存檔案
    - name: 清理暫存檔案
      if: always()
      run: |
        # 清理可能產生的暫存檔案
        find . -name "*.tmp" -delete 2>/dev/null || true
        find . -name "*.temp" -delete 2>/dev/null || true
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true